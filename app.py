import pandas as pd # libreria para trabajar con dataset
import plotly.graph_objects as go  # Importaci칩n de plotly.graph_objects como go
import plotly.express as px # importaci칩n de plotly.express
import streamlit as st # libreria para desplegar el proyecto en un explorador
from PIL import Image # importaci칩n de librerias para cargar im치genes


# C칩digo para establecer color de background en gris gainsboro
page_bg_style = '''
<style>
.stApp {
    /* Para un color s칩lido */
    background-color:gainsboro;

    /* Para un gradiente lineal */
    /* background-image: linear-gradient(to right, red, blue); */
}
</style>
'''

st.markdown(page_bg_style, unsafe_allow_html=True) #MOstrar el txto en formato markdown y renderizar en HTML


# Leer los datos del archivo CSV
car_data = pd.read_csv('vehicles_us.csv')


#st.title('Reporte General Veh칤culos en Venta')


# Estilo CSS global para recuadros
st.markdown("""
<style>
.recuadro-header {
    border: 2px solid #4CAF50;
    border-radius: 10px;
    padding: 15px;
    margin: 15px 0;
    background-color: #f9f9f9;
    text-align: center;
    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
}
.recuadro-texto {
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 12px;
    margin: 10px 0;
    background-color: white;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}
</style>
""", unsafe_allow_html=True)

# Header con recuadro
st.markdown('<div class="recuadro-header"><h1>Reporte General Veh칤culos en Venta</h1></div>', 
            unsafe_allow_html=True) # Titulo general de proyecto


# Se muestra imagen desde archivo local ubicado en el mismo directorio razi del proyecto
image = Image.open("cars aisle.jpg") # Ruta de la imagen
st.image(image, use_container_width=True) # cargar imagen en streamlit, ajuste autom치tico de ancho dela imagen


def texto_titulo(texto): # funci칩n para definir par치metros de foramto de texto para el texto_titulo
    st.markdown(f'<h1 style="font-size: 28px; border: 2px solid #4CAF50; padding: 10px; border-radius: 8px;">{texto}</h1>', 
                unsafe_allow_html=True)
    
texto_titulo("Filtro de b칰squeda de veh칤culo") # nombre del texto_titulo


all_types = ['Todos'] + sorted(car_data['type'].dropna().unique().tolist()) # Se crea un filtro interactivo de streamlit con el texto " Todos" m치s un filtro de todos los valores 칰nicos de la columna "type" pas치ndolos a una lista de python con .tolist()
selected_type = st.selectbox('Selecciona el Tipo de Veh칤culo', all_types) # Herramienta de caja de selecci칩n con la variable creada all types

# Aplicar el primer filtro al DataFrame
if selected_type != 'Todos': # Condici칩n si no se elige " Todos"
    data_filtered_by_type = car_data[car_data['type'] == selected_type] #La variable resultante ser치 el valor del filtro de dataset seleccionado como selected_type
else: 
    
    data_filtered_by_type = car_data.copy() # Si elige "Todos", no se aplica filtro

# Segundo Filtro (en cascada): Modelo del Veh칤culo
# Las opciones del modelo dependen del tipo seleccionado en el nuevo dataset filtrado resultante: data_filtered_by_type
available_models = ['Todos'] + sorted(data_filtered_by_type['model'].dropna().unique().tolist()) # Se crea un filtro interactivo de streamlit con el texto " Todos" m치s un filtro de todos los valores 칰nicos de la columna "model" pas치ndolos a una lista de python con .tolist()
selected_model = st.selectbox('Selecciona el Modelo', available_models) # Herramienta de caja de selecci칩n con la variable creada available_models

# Aplicar el segundo filtro al DataFrame ya filtrado por tipo
if selected_model != 'Todos':# Condici칩n si no se elige " Todos"
    filtered_data = data_filtered_by_type[data_filtered_by_type['model'] == selected_model]#La variable resultante ser치 el valor del filtro de dataset seleccionado como selected_model
else: 
    filtered_data = data_filtered_by_type # Si elige "Todos", no se aplica filtro


condition_models = ['Todos'] + sorted(filtered_data['condition'].dropna().unique().tolist()) # Se crea un filtro interactivo de streamlit con el texto " Todos" m치s un filtro de todos los valores 칰nicos de la columna "condition" pas치ndolos a una lista de python con .tolist()
selected_condition = st.selectbox('Selecciona la condici칩n', condition_models) # Herramienta de caja de selecci칩n con la variable creada condition_models

# Aplicar el segundo filtro al DataFrame ya filtrado por tipo
if selected_condition != 'Todos': # Condici칩n si no se elige " Todos"
    filtered_condition = filtered_data[filtered_data['condition'] == selected_condition] #La variable resultante ser치 el valor del filtro de dataset seleccionado como selected_condition
    #filtered_condition = filtered_condition.reset_index()
    #filtered_condition.columns = ['item','price','model_year','model','condition','cylinders','fuel','odometer','transmission','type','paint_color','is_4wd','date_posted','days_listed']
    
else:
    filtered_condition = filtered_data # Si elige "Todos", no se aplica filtro
    #filtered_condition = filtered_condition.reset_index()
    #filtered_condition.columns = ['item','price','model_year','model','condition','cylinders','fuel','odometer','transmission','type','paint_color','is_4wd','date_posted','days_listed']

min_value=int(filtered_condition['price'].min()) # se crea variable para determinar valor m칤nimo de la columna precio del dataset filtrado
max_value=int(filtered_condition['price'].max()) # se crea variable para determinar valor m치ximo de la columna precio del dataset filtrado

# 2. Verificar y ajustar los valores si min_value >= max_value
if min_value > max_value:
    # COndici칩n por si sucede, esta situaci칩n no deber칤a ocurrir, pero por seguridad
    min_value, max_value = 0, 1
elif min_value == max_value:
    # Si son iguales, ajusta max_value para que sea mayor
    max_value = min_value + 1  # Max value sera mayor en +1 que min_value, porque si



# 3. Solo mostrar el slider si hay un rango v치lido para seleccionar
if min_value < max_value: # si valor minimo menor que m치ximo
    price_range = st.slider( # mostrar slider
        'Selecciona el rango de precio',
        min_value=min_value, # valor m칤nimo
        max_value=max_value, # valor m치ximo
        value=(min_value, max_value) # l칤mites de valores
        )

# Aplicar el rango de precios seleccionado al DataFrame
    final_filtered_data = filtered_condition[
        (filtered_condition['price'] >= price_range[0]) & 
        (filtered_condition['price'] <= price_range[1])
    ]
else:
    
    st.info("No hay un rango de precios disponible para filtrar con los criterios seleccionados.")
    final_filtered_data = filtered_condition



# Mostrar resultados
st.write(f'Mostrando {len(final_filtered_data)} veh칤culos de {len(car_data)} totales') # texto cantidad de valores encontrados en el filtro
st.dataframe(final_filtered_data) #mostrar dataframe con el resultado del filtro

def texto_titulo2(texto): # funci칩n para formato de titulo 2
    st.markdown(f'<h1 style="font-size: 28px; border: 2px solid #4CAF50; padding: 10px; border-radius: 8px;">{texto}</h1>', 
                unsafe_allow_html=True)
    

texto_titulo2("Distribuci칩n por precio de veh칤culos filtrados") # Texto de t칤tulo 2

build_histogram1 = st.checkbox('Construir histograma de distribuci칩n por precio') # Elemento de Checkbox de streamlit

if build_histogram1: # condicional en caso de activar el checkbox

# Contar la cantidad de veh칤culos por marca
    conteo_por_marca = car_data['transmission'].value_counts().reset_index() # filtro de dataset de valores unicos y con reseteo de encabezado de columnas 
    conteo_por_marca.columns = ['transmission', 'count']  # Renombrar columnas

# Crear el gr치fico de histograma
    fig = px.histogram(
    final_filtered_data,  #DataFrame despu칠s de aplicar todos los filtros
    x='price', #eje x
    title=f'Distribuci칩n de Precios ({len(final_filtered_data)} veh칤culos)', #t칤tulo del histograma
    nbins=20
    )
    
# Mejorar el formato del grafico, tama침o de texto, posici칩n,etc.
    fig.update_traces(
        textfont_size=12,
        textangle=0,
        textposition="outside",
        cliponaxis=False
    )
    fig.update_layout(xaxis_tickangle=-45)  # Rota las etiquetas del eje X para mejor legibilidad

# Mostrar el gr치fico en Streamlit
    st.plotly_chart(fig, use_container_width=True)


st.header("游눯 Cotizador de Financiamiento Vehicular") # tercer encabezado

# Seleccionar un veh칤culo para cotizar
st.subheader("Veh칤culo m치s econ칩mico encontrado en tu b칰squeda :") # subtitulo

# Mostrar algunos veh칤culos para seleccionar (puedes adaptar esto a tus filtros)


if 'final_filtered_data' in locals(): # locals: Funci칩n que devuelve un diccionario con todas las variables locales existentes en ese momento y verifica si final_filtered_data existe en el entorno actual
    vehiculos_sample = final_filtered_data[['model', 'price']].sort_values('price', ascending = True).drop_duplicates(subset=['model']) # selecci칩n para filtrar dataset por las columnas model y price, evitar duplicados de la columna model, se ordena por la columna price orden ascendente para ubicar el de menor valor primero
    selected_vehicle = st.selectbox( # caja de selecci칩n b치sado en el dataset filtrado vehiculos_sample
        "Elige un veh칤culo:",
        options=vehiculos_sample['model'].tolist(), # Convierte la columna 'model' a una lista para las opciones del men칰
        format_func=lambda x: f"{x} - ${vehiculos_sample[vehiculos_sample['model']==x]['price'].tolist()}" # Personaliza c칩mo se muestran las opciones en el men칰, Funci칩n an칩nima que recibe cada modelo (x) y devuelve un string formateado, muestra todos los precios como lista, no solo el precio espec칤fico
    )

    
    # Obtener el precio del veh칤culo seleccionado
    precio_vehiculo = vehiculos_sample[vehiculos_sample['model']==selected_vehicle]['price'].iloc[0] # se elige el primer item de la lista filtrada
else:
    # Si no se tiene car_data, usar un valor por defecto
    precio_vehiculo = st.number_input("Ingresa el precio del veh칤culo ($):", min_value=1000, max_value=1000000, value=25000)




# Par치metros del cr칠dito
st.subheader("Condiciones del Cr칠dito") # titulo para el cr칠dito

tasa_interes_anual = 0.24  # variable de tasa de interes 24% EA
st.info(f"Tasa de inter칠s: {tasa_interes_anual*100}% EA") # se imprime texto con inforamci칩n de tasa de interes en porcentaje

# Barra deslizante para a침os de financiamiento
anos_financiamiento = st.slider(
    "A침os de financiamiento:",
    min_value=3, # valor m칤nimo de slider
    max_value=7, # valor m치ximo de slider
    value=5, # valor por defecto
    step=1 # valor incremental
)

# C치lculos financieros
def calcular_cuota_mensual(precio, tasa_anual, anos): # funci칩n calculo de tasas en 12 meses
    """Calcula la cuota mensual usando la f칩rmula de anualidades"""
    tasa_mensual = tasa_anual / 12 # valor tasa de interes por mes
    numero_pagos = anos * 12 # cantidad de pagos totales, multiplicando por a침o por meses del a침o
    
    if tasa_mensual > 0: # condici칩n si tasa mayor que cero
        cuota = precio * (tasa_mensual * (1 + tasa_mensual)**numero_pagos) / ((1 + tasa_mensual)**numero_pagos - 1) # formula de amotizaci칩n : Calcula el factor de capitalizaci칩n - c칩mo crece el dinero con el tiempo, Numerador de la fracci칩n - representa la porci칩n de inter칠s, Denominador - normaliza el c치lculo para distribuir los pagos
    else:
        cuota = precio / numero_pagos # si no hubiera intereses
    
    return cuota

def generar_tabla_amortizacion(precio, tasa_anual, anos): # funci칩n donde ingresan los par치metros
    """Genera tabla de amortizaci칩n"""
    tasa_mensual = tasa_anual / 12
    numero_pagos = anos * 12
    cuota = calcular_cuota_mensual(precio, tasa_anual, anos) # resultado funci칩n anterior con return cuota
    
    saldo = precio # precio veh칤culo
    tabla = [] # se crea lista vacia
    
    for mes in range(1, numero_pagos + 1): #ciclo for para determinar valor cuota mensual
        interes = saldo * tasa_mensual # interes b치sado en el saldo capital actual
        capital = cuota - interes
        saldo -= capital
        
        tabla.append({ # datos que iran a la tabla como un diccionario
            'Mes': mes,
            'Cuota': cuota,
            'Inter칠s': interes,
            'Capital': capital,
            'Saldo': max(saldo, 0)
        })
    
    return pd.DataFrame(tabla) # devuelve el dataframe

# Calcular resultados
cuota_mensual = calcular_cuota_mensual(precio_vehiculo, tasa_interes_anual, anos_financiamiento)
total_pagado = cuota_mensual * (anos_financiamiento * 12)
interes_total = total_pagado - precio_vehiculo

# Mostrar resultados
st.subheader("游늵 Resumen de la Cotizaci칩n")

col1, col2, col3 = st.columns(3) # se establecen 3 columanas en pantalla

with col1: # columan 1
    st.metric( #st. metric crea un componente visual que muestra un valor num칠rico con formato atractivo para KPI췂s, etc
        "Cuota Mensual", # texto
        f"${cuota_mensual:,.2f}", # variable de cuota mensual con dos cifras decimales
        delta=None # indicador de cambio
    )

with col2:
    st.metric(
        "Total a Pagar",
        f"${total_pagado:,.2f}", # variable de total pagado en el total de tiempo escogido, con dos cifras decimales
        delta=f"${interes_total:,.2f} de inter칠s"
    )

with col3:
    st.metric(
        "Costo Financiero",
        f"${interes_total:,.2f}",# variable de total pagado en intereses en el total de tiempo escogido, con dos cifras decimales
        delta=f"{((interes_total/precio_vehiculo)*100):.1f}% del valor"
    )

# Gr치fico de distribuci칩n de pagos
st.subheader("游늳 Distribuci칩n de Pagos") # texto

import plotly.graph_objects as go

labels = ['Valor del Veh칤culo', 'Intereses']
values = [precio_vehiculo, interes_total]

fig = go.Figure(data=[go.Pie(labels=labels, values=values, hole=.3)]) # gra췂fico de pastel, muestra texto, valores de acuerdo a su proporci칩n y tama침o de ahujero en 3
fig.update_layout(title="Composici칩n del Total a Pagar") # A침ade titulo a toda la gr치fica
st.plotly_chart(fig, use_container_width=True) # integra el gr치fico en la aplicaci칩n Streamlit.

# Tabla de amortizaci칩n (opcional)
if st.checkbox("Mostrar tabla de amortizaci칩n (primeros 12 meses)"): # se crea un condicional para el checkbox
    st.subheader("游늶 Tabla de Amortizaci칩n") # subtitulo
    tabla_amort = generar_tabla_amortizacion(precio_vehiculo, tasa_interes_anual, anos_financiamiento)
    st.dataframe(tabla_amort.head(12).style.format({ # se muestran las primeras 12 filas de la tabla de amortizaci칩n
        'Cuota': '${:,.2f}',
        'Inter칠s': '${:,.2f}',
        'Capital': '${:,.2f}',
        'Saldo': '${:,.2f}'
    }))

# Informaci칩n adicional
st.subheader("游눠 Informaci칩n Importante") # informaci칩n adicional
st.write(f"""
- **Plazo:** {anos_financiamiento} a침os ({anos_financiamiento * 12} meses)
- **Tasa efectiva anual:** {tasa_interes_anual * 100}%
- **Tasa mensual:** {(tasa_interes_anual/12)*100:.2f}%
- **Valor financiado:** ${precio_vehiculo:,.2f}
- **Total intereses:** ${interes_total:,.2f}
""")
st.subheader('')

def texto_titulo3(texto): # funci칩n para texto de t칤tulo 3
    st.markdown(f'<h1 style="font-size: 32px; border: 2px solid #4CAF50; padding: 10px; border-radius: 8px;">{texto}</h1>', 
                unsafe_allow_html=True)
    
texto_titulo3("Otros datos de inter칠s del reporte general de veh칤culos en venta") # texto n칰mero 4

st.subheader('')

def texto_titulo4(texto): # funci칩n para texto de t칤tulo 3
    st.markdown(f'<h1 style="font-size: 28px; border: 2px solid #4CAF50; padding: 10px; border-radius: 8px;">{texto}</h1>', 
                unsafe_allow_html=True)
    

texto_titulo4("Distribuci칩n por A침o de Fabricaci칩n de todos los Veh칤culos") # texto n칰mero 4

build_histogram2 = st.checkbox('Construir Histograma por A침o de Fabricaci칩n') # histograma de vec칤culos general segun a침o de fabricaci칩n
if build_histogram2:

    fig = px.histogram( # se crea histograma
        car_data, # dataset inicial
        x="model_year",        # Columna para el eje X (a침o del modelo)
        color="condition",     # Columna para diferenciar por color (condici칩n)
        title="Distribuci칩n por A침o de Fabricaci칩n del total del Listado General de Veh칤culos",
        labels={"model_year": "A침o del Veh칤culo", "condition": "Condici칩n"}, # Etiquetas m치s claras
        category_orders={"condition": ["excellent", "good", "fair", "like new", "new", "salvage"]} # Orden opcional
    )

# Personalizar el dise침o del gr치fico
    fig.update_layout(
        bargap=0.1,  # Espacio entre grupos de barras
        xaxis_title="A침o del Veh칤culo",
        yaxis_title="Cantidad de Veh칤culos"
    )

# Mostrar el gr치fico en Streamlit
    st.plotly_chart(fig, use_container_width=True)


